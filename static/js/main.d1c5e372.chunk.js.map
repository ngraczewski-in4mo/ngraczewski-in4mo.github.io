{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["id","buildItem","items","header","DroppableTBody","children","droppableId","type","e","ref","innerRef","droppableProps","placeholder","DraggableRow","draggableId","index","isHandle","draggableProps","dragHandleProps","App","useState","data","setData","map","React","useCallback","flatMap","toItems","item","reduce","prev","onDragEnd","destination","source","updated","console","log","className","d1","i1","key","handle1","d2","i2","handle2","d3","i3","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAeIA,EAAK,EAEHC,EAAY,eAACC,EAAD,uDAAiB,GAAjB,MAA+B,CAC7CC,OAAO,UAAD,OAAYH,KAClBA,KACAE,UAGEE,EAID,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,YAAaC,EAAzB,EAAyBA,KAAzB,OAAmC,kBAAC,IAAD,CAAWD,YAAaA,EAAaC,KAAMA,GAAQD,IACtF,SAACE,GAAD,OAA0B,yCAAOC,IAAKD,EAAEE,UAAcF,EAAEG,gBAAiBN,EAAUG,EAAEI,iBAIpFC,EAKD,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,MAAOV,EAAtB,EAAsBA,SAAUW,EAAhC,EAAgCA,SAAhC,OAA8C,kBAAC,IAAD,CAAWF,YAAaA,EAAaC,MAAOA,IAC1F,SAACP,GAAD,OAA0B,sCAAIC,IAAKD,EAAEE,UAAcF,EAAES,eAAqBD,EAAWR,EAAEU,gBAAkB,IACrGb,EAASW,EAAW,KAAOR,EAAEU,sBAsHvBC,MAlHf,WAAgB,IAAD,EAEaC,mBAAS,CAC7BnB,EACI,CAACA,EAAU,CACPA,IACAA,MAEAA,EAAU,CACNA,IACAA,QAGZA,EACI,CAACA,EAAU,CACPA,IACAA,MAEAA,EAAU,CACNA,IACAA,QAGZA,EACI,CAACA,EAAU,CACPA,IACAA,MAEAA,EAAU,CACNA,IACAA,UA9BL,mBAEJoB,EAFI,KAEEC,EAFF,KAmCLC,EAAMC,IAAMC,aAAY,SAACvB,GAM3B,OAAOA,EAAMwB,SALG,SAAVC,EAAWC,GAAD,OACZA,GADY,mBAETA,EAAK1B,MAAMwB,QAAQC,QAGIE,QAAO,SAACC,EAAWF,GAE7C,OADAE,EAAKF,EAAKzB,QAAUyB,EACbE,IACR,MACJ,IA2BL,OACE,kBAAC,IAAD,CAAiBC,UA1BC,SAACvB,GACf,GAAKA,EAAEwB,aAAexB,EAAEwB,YAAY1B,cAAgBE,EAAEyB,OAAO3B,YAA7D,CAGA,IAIIJ,EAJEgC,EAAO,YACNb,GAWDS,GALF5B,EAD8B,cAA9BM,EAAEwB,YAAY1B,YACN4B,EAEAX,EAAIW,GAAS1B,EAAEwB,YAAY1B,aAAaJ,OAGjCM,EAAEwB,YAAYjB,OAEjCb,EAAMM,EAAEwB,YAAYjB,OAASb,EAAMM,EAAEyB,OAAOlB,OAC5Cb,EAAMM,EAAEyB,OAAOlB,OAASe,EACxBK,QAAQC,IAAIF,GAEZZ,EAAQY,MAKR,2BAAOG,UAAU,4BACb,kBAAC,EAAD,CAAgB/B,YAAa,aACxBe,EAAKE,KAAI,SAACe,EAAIC,GAAL,OACN,kBAAC,EAAD,CAAczB,YAAawB,EAAGnC,OAAQY,MAAOwB,EAAIC,IAAKF,EAAGnC,SACpD,SAAAsC,GAAO,OAAI,wBAAIJ,UAAU,OACtB,2BAAOA,UAAU,4BACb,+BACI,wCAAQI,EAAR,CAAiBJ,UAAU,kBAAgB,4BAAKC,EAAGnC,UAEvD,kBAAC,EAAD,CAAgBG,YAAagC,EAAGnC,QAC3BmC,EAAGpC,MAAMqB,KAAI,SAACmB,EAAIC,GAAL,OACd,kBAAC,EAAD,CAAc7B,YAAa4B,EAAGvC,OAAQY,MAAO4B,EAAIH,IAAKE,EAAGvC,SACpD,SAAAyC,GAAO,OAAI,wBAAIP,UAAU,OACtB,2BAAOA,UAAU,4BACb,+BACI,wCAAQO,EAAR,CAAiBP,UAAU,oBAAkB,4BAAKK,EAAGvC,UAEzD,kBAAC,EAAD,CAAgBG,YAAaoC,EAAGvC,QAC3BuC,EAAGxC,MAAMqB,KAAI,SAACsB,EAAIC,GAAL,OACV,kBAAC,EAAD,CAAchC,YAAa+B,EAAG1C,OAAQY,MAAO+B,EAAIN,IAAKK,EAAG1C,OAAQa,UAAQ,IACpE,kBAAM,4BAAK6B,EAAG1C,oCC7HvD4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1c5e372.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport './App.css';\nimport {\n    DragDropContext,\n    Draggable, DraggableProvided, DraggableProvidedDragHandleProps,\n    Droppable,\n    DroppableProvided, DropResult,\n} from \"react-beautiful-dnd\";\n\ntype Item = {\n    id: number,\n    header: string,\n    items: Item[]\n};\n\nlet id = 1;\n\nconst buildItem = (items: Item[] = []): Item => ({\n    header: `Header-${id++}`,\n    id,\n    items,\n});\n\nconst DroppableTBody: React.FC<{\n    droppableId: string,\n    type?: string,\n    children: React.ReactElement | React.ReactElement[];\n}> = ({children, droppableId, type}) => <Droppable droppableId={droppableId} type={type || droppableId}>\n    {(e: DroppableProvided) => <tbody ref={e.innerRef} {...e.droppableProps}>{children}{e.placeholder}\n    </tbody>}\n</Droppable>;\n\nconst DraggableRow: React.FC<{\n    draggableId: string,\n    index: number,\n    children: (props: DraggableProvidedDragHandleProps | null) => React.ReactElement\n    isHandle?: boolean,\n}> = ({draggableId, index, children, isHandle}) => <Draggable draggableId={draggableId} index={index}>\n    {(e: DraggableProvided) => <tr ref={e.innerRef} {...e.draggableProps} {...(isHandle ? e.dragHandleProps : {})}>\n        {children(isHandle ? null : e.dragHandleProps)}\n    </tr>}\n</Draggable>;\n\nfunction App() {\n\n    const [data, setData] = useState([\n        buildItem(\n            [buildItem([\n                buildItem(),\n                buildItem()\n            ]),\n                buildItem([\n                    buildItem(),\n                    buildItem()\n                ])],\n        ),\n        buildItem(\n            [buildItem([\n                buildItem(),\n                buildItem()\n            ]),\n                buildItem([\n                    buildItem(),\n                    buildItem()\n                ])],\n        ),\n        buildItem(\n            [buildItem([\n                buildItem(),\n                buildItem()\n            ]),\n                buildItem([\n                    buildItem(),\n                    buildItem()\n                ])],\n        )\n    ]);\n\n    const map = React.useCallback((items: Item[]) => {\n        const toItems = (item: Item): Item[] => ([\n            item,\n            ...item.items.flatMap(toItems)\n        ]);\n\n        return items.flatMap(toItems).reduce((prev: any, item: Item) => {\n            prev[item.header] = item;\n            return prev;\n        }, {})\n    }, []);\n\n    const onDragEnd = (e: DropResult) => {\n        if (!e.destination || e.destination.droppableId !== e.source.droppableId) {\n            return\n        }\n        const updated = [\n            ...data,\n        ];\n\n        let items: Item[];\n\n        if (e.destination.droppableId === 'mainItems') {\n            items = updated;\n        } else {\n            items = map(updated)[e.destination.droppableId].items;\n        }\n\n        const prev = items[e.destination.index];\n\n        items[e.destination.index] = items[e.source.index];\n        items[e.source.index] = prev;\n        console.log(updated);\n\n        setData(updated);\n    };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n        <table className=\"table w-100 m-0 border-0\">\n            <DroppableTBody droppableId={'mainItems'}>\n                {data.map((d1, i1) =>\n                    <DraggableRow draggableId={d1.header} index={i1} key={d1.header}>\n                        {handle1 => <td className=\"p-0\">\n                            <table className=\"table w-100 m-0 border-0\">\n                                <thead>\n                                    <tr {...handle1} className=\"table-primary\"><td>{d1.header}</td></tr>\n                                </thead>\n                                <DroppableTBody droppableId={d1.header}>\n                                    {d1.items.map((d2, i2) =>\n                                    <DraggableRow draggableId={d2.header} index={i2} key={d2.header}>\n                                        {handle2 => <td className=\"p-0\">\n                                            <table className=\"table w-100 m-0 border-0\">\n                                                <thead>\n                                                    <tr {...handle2} className=\"table-secondary\"><td>{d2.header}</td></tr>\n                                                </thead>\n                                                <DroppableTBody droppableId={d2.header}>\n                                                    {d2.items.map((d3, i3) =>\n                                                        <DraggableRow draggableId={d3.header} index={i3} key={d3.header} isHandle>\n                                                            {() => <td>{d3.header}</td>}\n                                                        </DraggableRow>\n                                                    )}\n                                                </DroppableTBody>\n                                            </table>\n                                        </td>}\n                                    </DraggableRow>\n                                    )}\n                                </DroppableTBody>\n                            </table>\n                        </td>}\n                    </DraggableRow>\n                )}\n            </DroppableTBody>\n        </table>\n\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}